import os
import argparse
import numpy as np
import pickle

from pycocotools import mask as COCOmask
from dummy_datasets import get_coco_dataset, get_ade_dataset
from coco_format import *

def convert_from_cls_format(cls_boxes, cls_segms, cls_keyps):
    """Convert from the class boxes/segms/keyps format generated by the testing
    code.
    """
    box_list = [b for b in cls_boxes if len(b) > 0]
    if len(box_list) > 0:
        boxes = np.concatenate(box_list)
    else:
        boxes = None
    if cls_segms is not None:
        segms = [s for slist in cls_segms for s in slist]
    else:
        segms = None
    if cls_keyps is not None:
        keyps = [k for klist in cls_keyps for k in klist]
    else:
        keyps = None
    classes = []
    for j in range(len(cls_boxes)):
        classes += [j] * len(cls_boxes[j])
    return boxes, segms, keyps, classes


def make_annotations(detections, im_list):
    annotations = []
    for imgId, im_name in enumerate(im_list):
        print(imgId, im_name, len(annotations))

        cls_boxes, cls_segms, cls_keyps = detections[im_name]
        boxes, segms, keypoints, classes = convert_from_cls_format(cls_boxes, cls_segms, cls_keyps)
        if segms is None:
            continue

        for i in range(len(segms)):
            segm = segms[i]
            score = boxes[i, -1]
            cat = classes[i]

            mask = COCOmask.decode(segm)

            ann = make_ann(mask, cat)
            ann["image_id"] = imgId
            ann["id"] = len(annotations)
            ann["score"] = float(score)
            annotations.append(ann)

    return annotations

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--im_dir', type=str, default="../data/ade20k/images/")
    parser.add_argument('-l', '--im_list', type=str, default="../data/ade20k/images/validation.txt")
    parser.add_argument('-c', '--categories', type=str, default="coco")
    parser.add_argument('-p', '--pkl', type=str, default=None)
    args = parser.parse_args()

    cat_list = []
    if args.categories == "coco":
        cat_list = get_coco_dataset()
    elif args.categories == "ade":
        cat_list = get_ade_dataset()

    im_list = []
    with open(args.im_list,'r') as f:
        im_list = f.read().splitlines()

    detections = None
    with open(args.pkl, 'rb') as f:
        detections = pickle.load(f)

    images = make_images(args.im_dir, im_list)
    categories = make_categories(cat_list)
    annotations = make_annotations(detections, im_list)

    out_dir = os.path.dirname(args.pkl)
    out_file = os.path.join(out_dir, "predictions.json")
    save_ann_fn(images, annotations, categories, out_file)


